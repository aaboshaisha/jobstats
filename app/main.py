"""Simple UI for jobstas app"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/app.ipynb.

# %% auto 0
__all__ = ['app', 'rt', 'country_results', 'grid_style', 'style_chart', 'plot_locs_pie', 'categorize_experience',
           'plot_experience_pie', 'salary_range_slider', 'plot_skills_bar', 'graph_to_uri', 'get', 'post']

# %% ../nbs/app.ipynb 4
from fasthtml.common import *
from datetime import datetime
from .db_ops import *
from .country_data import *
import matplotlib
from typing import Optional

# %% ../nbs/app.ipynb 5
import app.setup_paths

# %% ../nbs/app.ipynb 6
matplotlib.use('Agg') # Set the backend to 'Agg' (or 'SVG')

# %% ../nbs/app.ipynb 7
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from collections import Counter
import io
import base64

# %% ../nbs/app.ipynb 8
def style_chart():
    plt.rcParams.update({
        'font.size': 12,
        'font.weight': 'bold',
        'axes.labelweight': 'normal',
        'axes.titlesize': 16,
        'axes.titleweight': '600',
        'axes.edgecolor': 'lightgray',  # ~ #e2e8f0
        'axes.linewidth': 1,
        'xtick.color': 'slategray',     # ~ #64748b
        'ytick.color': 'slategray',     # ~ #64748b
        'text.color': 'darkslategray',  # ~ #1e293b
        'figure.facecolor': 'white',
        'font.family': 'DejaVu Sans, sans-serif',
        'axes.prop_cycle': plt.cycler(color=[
            'dodgerblue',     # ~ #3b82f6
            'mediumturquoise',# ~ #06b6d4
            'mediumseagreen', # ~ #10b981
            'goldenrod'       # ~ #f59e0b
        ])
    })


# %% ../nbs/app.ipynb 10
def plot_locs_pie(locs: tuple):
    style_chart()
    counts = Counter(locs)
    fig, ax = plt.subplots(figsize=(10,8))
    ax.pie(counts.values(), labels=counts.keys(), autopct='%1.1f%%', pctdistance=1.25, wedgeprops=dict(width=0.25))
    fig.tight_layout()


# %% ../nbs/app.ipynb 12
def categorize_experience(yrs: tuple) -> str:
    'Categorizes years of experience to Entry, Mid, Senior and Lead so we can Pie chart'
    if yrs <= 2:
        return 'Entry'
    elif yrs <= 5:
        return 'Mid'
    elif yrs <= 10:
        return 'Senior'
    else:
        return 'Lead'

def plot_experience_pie(years: tuple):
    style_chart()
    yrs_counts = Counter(map(categorize_experience, years))
    fig, ax = plt.subplots(figsize=(10,8))
    ax.pie(yrs_counts.values(), labels=yrs_counts.keys(), autopct='%1.1f%%', pctdistance=1.25)
    fig.tight_layout()

# %% ../nbs/app.ipynb 15
def salary_range_slider(smins:tuple, smaxes:tuple):
    style_chart()
    smin, smax = min(smins), max(smaxes)
    avgs = [(smin + smax) / 2 for smin, smax in zip(smins, smaxes)]
    avg = round(sum(avgs) / len(avgs), 0)
    # normalize: (avg - smin) / (smax - smin) to get 0-1 ratio
    # start_pos + normalized * track_width
    slider_pos = 0.2 + ((avg - smin) / (smax - smin)) * 0.6

    fig, ax = plt.subplots(figsize=(6,2))
    # set the x and y axes
    ax.set_xlim(left=0, right=1); ax.set_ylim(bottom=0, top=1);ax.axis('off')
    # draw horizontal bar as rectangle from 0.2 to 0.5
    ax.add_patch(Rectangle(xy=(0.2, 0.5), width=0.6, height=0.2, color='lightgray'))
    # add slider handle at pos (x=0.45, y=0.5)
    ax.add_patch(Rectangle(xy=(slider_pos, 0.5), width=0.1, height=0.2, color='dodgerblue'))
    # add title and numbers
    ax.text(x=0.5, y=0.9, s='Salary Range', ha='center', fontweight='bold', fontsize=14)
    ax.text(x=0.2, y=0.4, s=f'${smin}k', ha='center', fontsize=12)
    ax.text(x=0.8, y=0.4, s=f'${smax}k', ha='center', fontsize=12)
    fig.tight_layout()


# %% ../nbs/app.ipynb 17
def plot_skills_bar(skills: list[tuple]):
    "Return horizontal bar chart of skills as base64 encoded string"
    style_chart()
    x, y = [], []
    for skill, freq in skills:
        x.append(skill)
        y.append(freq)
    
    plt.figure(figsize=(10,8))
    plt.barh(x[::-1], y[::-1])
    plt.title('Top Skills Required')
    plt.gca().set_xticklabels([])
    plt.tight_layout()

# %% ../nbs/app.ipynb 19
def graph_to_uri(plot_func, *args):
    'Takes one graphing func and its input. Returns base64 data uri for html'
    plot_func(*args)
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0) # go to the beginning of the stream
    img_base64 = base64.b64encode(buffer.getvalue()).decode()
    plt.close()
    return f'data:image/png;base64,{img_base64}'

# %% ../nbs/app.ipynb 21
app, rt = fast_app(pico=True)


country_results = Div(id='country-results', hx_swap_oob='true',
                      style='position: absolute; top: 100%; left: 0; z-index: 1000; background: white; border: 1px solid #ccc;')
        

@rt('/')
def get():

    title = Container(
    H1('Job Stats Search', style='text-align: center;font-weight: 600; margin-bottom: 8px;margin-left: 20px;margin-right: 20px;'),
    H5(f'What skills do jobs actually require in {datetime.now().year}', 
       style='text-align: center;font-weight: 400; margin-bottom: 32px;'),
    )

    searchbar = Form(
        Input(name='job', placeholder='Enter Job Title'),
        Div(Input(name='country', placeholder='Country(optional)',
              hx_get='/search-country',
              hx_target='#country-results',
              hx_trigger='keyup changed delay:500ms',
              id='country-input'), country_results , style='position: relative;'),
        Button('Search', hx_post='/get_insights', hx_target='#insights-grid', style='margin-left:5px;'),
        style='padding: 0 20px;'
    )


    grid = Grid(Div(id='tl', ), Div(id='tr', ), Div(id='bl', ), Div(id='br'), id='insights-grid')

    footer = Container(
        Div(
            P("This app useful?"),
            P("Might build out the full thing if enough people care."),
            P("Got feedback or want it built?"),
            P(A("Leave your email (and/or suggestions)", href='https://forms.gle/wGKaLXvPnD8k2gwh9', target="_blank")),
            P("(no spam. no BS. you'll know if it ships.)", style="font-size: smaller; color: gray;"),
            style="text-align: center; padding: 40px 20px; margin-top: 40px; border-top: 1px solid #eee;"
        )
    )


    return Container(Main(title, searchbar ,grid, ),footer)


grid_style='''
display: grid;
grid-template-columns: 1fr 1fr;
grid-template-rows: auto auto;
gap: 16px;
padding: 16px;
border-radius: 12px;
'''

@rt('/search-country')
def get(country:str=''):
    if not country:
        return Div(id='country-results', hx_swap_oob='true')
    matches = [name for name in codes_to_countries.values() if country.lower() in name.lower()]
    return Div(*[Div(country.title(),
                     hx_get=f'/select-country?country={country}', 
                     hx_target='#country-results',
                     style='cursor:pointer;') for country in matches[:10]])

@rt('/select-country')
def get(country: str):
    return (
        Input(name='country', value=country, placeholder='Country(optional)',
              hx_get='/search-country',
              hx_target='#country-results',
              hx_trigger='keyup changed delay:300ms',
              hx_swap_oob='true',
              id='country-input'),
        Div(id='country-results', hx_swap_oob='true')
    )


@rt('/get_insights')
def post(job:str, country:Optional[str]):
    if not job:
        return Grid(Div(id='tl', ), Div(id='tr', ), Div(id='bl', ), Div(id='br'), id='insights-grid')
    
    skills = skills_for_job(job, country=country, top_k=10)
    if not skills:
        return P('Sorry, nothing in our database matches your search ctiteria.', style='margin-top:10px;'), Grid(Div(id='tl', ), Div(id='tr', ), Div(id='bl', ), Div(id='br'), id='insights-grid')
    locs, yrs, smins, smaxes = zip(*get_job_insights(job))
    
    skills_bar_uri = graph_to_uri(plot_skills_bar, skills)
    locs_pie_uri = graph_to_uri(plot_locs_pie, locs)
    yrs_pie_uri = graph_to_uri(plot_experience_pie, yrs)
    slider_uri = graph_to_uri(salary_range_slider, smins, smaxes)
    Img_style = "width: 100%; height: auto; display: block;"
    return Grid(
        Div(Img(src=skills_bar_uri, style=Img_style), id='tl'),
        Div(Img(src=yrs_pie_uri, style=Img_style), id='tr'),
        Div(Img(src=locs_pie_uri, style=Img_style), id='bl'),
        Div(Img(src=slider_uri, style=Img_style), id='br'),
        id='insights-grid',
        style=grid_style
    )

# %% ../nbs/app.ipynb 22
serve()
